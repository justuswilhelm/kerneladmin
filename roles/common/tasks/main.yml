---
- name: Clone dotfiles
  git:
    repo: "{{ dotfiles_repository }}"
    dest: "{{ dotfiles }}"
    accept_hostkey: true
    version: master
  ignore_errors: True

- name: Ensure dotfiles exist
  shell: "test -d {{ dotfiles }}"

- name: Install dotfiles
  command: "{{ dotfiles }}/bin/install_dotfiles"

- name: Create golang bin folder
  file:
    dest: "{{ home }}/go/bin"
    recurse: true
    state: directory

- name: Symlink bin folder
  file:
    src: "{{ dotfiles }}/bin"
    dest: "{{ home }}/bin"
    state: link

- name: Ensure local bin folder exists
  file:
    dest: "{{ home }}/.local/bin"
    state: directory

- name: Find out path to fish
  command: which fish
  register: which_fish

- name: Find out if shell is already set to fish
  script: detect_fish
  register: shell_is_fish
  ignore_errors: True

- name: Change shell to fish
  command: "chsh -s {{ which_fish.stdout }} {{ ansible_user }}"
  when: shell_is_fish|failed
  become: true

- name: Git configuration
  command: git config --global {{ item.key }} {{ item.value }}
  with_dict: "{{ git_config }}"

- name: Git email configured?
  command: grep {{ home }}/.gitconfig -e 'email'
  register: git_email_configured
  ignore_errors: true

- name: Git name configured?
  command: grep {{ home }}/.gitconfig -e 'name = '
  register: git_name_configured
  ignore_errors: true

- name: Configure git email
  command: git config --global user.email {{ git_email }}
  when: git_email_configured|failed

- name: Configure git name
  command: git config --global user.name {{ git_name }}
  when: git_name_configured|failed

- name: Copy gitignore
  copy:
    src: gitignore
    dest: "{{ home }}/.gitignore"

- name: Go Packages
  command: go get -u {{ item }}
  environment:
    GOPATH: "{{ home }}/go"
  with_items: "{{ go_packages }}"

- name: NPM configuration
  npm:
    name: "{{ item }}"
    global: true
  with_items: "{{ npm_packages }}"
  ignore_errors: true

- name: Python 2 pip Packages
  pip:
    name: "{{ item }}"
    executable: pip2
  with_items: "{{ pip2_packages }}"

- name: Python 3 pip Packages
  pip:
    name: "{{ item }}"
    executable: pip3
  with_items: "{{ pip3_packages }}"
